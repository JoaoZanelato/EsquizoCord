#!/usr/bin/env node

/**
 * Módulos de dependência.
 */

// Importa o app e o sessionMiddleware do arquivo app.js
const { app, sessionMiddleware } = require('../app'); 
const debug = require('debug')('teste:server');
const http = require('http');
const { Server } = require("socket.io");

/**
 * Obtém a porta do ambiente e a armazena no Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Cria o servidor HTTP.
 */

const server = http.createServer(app);

/**
 * Configuração do Socket.IO
 */
const io = new Server(server);

// Permite que o Socket.IO acesse as informações de sessão do Express.
// Isso é crucial para identificar o usuário conectado a um socket específico.
io.use((socket, next) => {
  sessionMiddleware(socket.request, {}, next);
});

// Um Set para armazenar os IDs dos usuários que estão online.
// Usar um Set é eficiente para adicionar e remover IDs únicos.
const onlineUsers = new Set();

io.on('connection', (socket) => {
  const session = socket.request.session;

  // Verifica se o socket pertence a um usuário logado
  if (session && session.user) {
    const userId = session.user.id_usuario;
    
    // Adiciona o ID do usuário ao conjunto de usuários online
    onlineUsers.add(userId);
    console.log(`Usuário conectado: ${userId}. Total online: ${onlineUsers.size}`);
    
    // Notifica todos os outros clientes que este usuário ficou online
    socket.broadcast.emit('user_online', { userId });
  }

  // Evento disparado quando o cliente se desconecta
  socket.on('disconnect', () => {
    if (session && session.user) {
      const userId = session.user.id_usuario;
      
      // Remove o ID do usuário do conjunto de usuários online
      onlineUsers.delete(userId);
      console.log(`Usuário desconectado: ${userId}. Total online: ${onlineUsers.size}`);

      // Notifica todos os outros clientes que este usuário ficou offline
      socket.broadcast.emit('user_offline', { userId });
    }
  });

  // Torna a lista de usuários online acessível globalmente no app Express
  // para que as rotas possam saber quem está online ao renderizar as páginas.
  app.set('onlineUsers', onlineUsers);
  // Disponibiliza a instância do 'io' para as rotas, se necessário
  app.set('io', io);
});

/**
 * Escuta na porta fornecida, em todas as interfaces de rede.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normaliza uma porta para um número, string ou false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Listener de evento para o evento "error" do servidor HTTP.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // Lida com erros específicos de escuta com mensagens amigáveis
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requer privilégios elevados');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' já está em uso');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Listener de evento para o evento "listening" do servidor HTTP.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}