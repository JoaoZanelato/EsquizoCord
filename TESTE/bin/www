#!/usr/bin/env node

/**
 * Módulos de dependência.
 */
const { app, sessionMiddleware } = require('../app'); // Importa app e sessionMiddleware
const debug = require('debug')('teste:server');
const http = require('http');
const { Server } = require("socket.io"); // Importa o Server do socket.io

/**
 * Obtém a porta do ambiente e armazena no Express.
 */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Cria o servidor HTTP.
 */
const server = http.createServer(app);

/**
 * --- CORREÇÃO PRINCIPAL: INICIALIZAÇÃO E LÓGICA DO SOCKET.IO ---
 */
const io = new Server(server);

// Faz com que o socket.io use o mesmo middleware de sessão do Express
// Isso permite aceder aos dados da sessão (req.session.user) dentro dos eventos do socket
io.use((socket, next) => {
  sessionMiddleware(socket.request, {}, next);
});

// Define o que acontece quando um novo cliente se conecta
io.on('connection', (socket) => {
  console.log(`Socket conectado: ${socket.id}`);
  
  // Associa o ID do usuário ao socket para referência futura, se necessário
  const userId = socket.request.session.user ? socket.request.session.user.id_usuario : null;
  if (userId) {
    socket.join(`user-${userId}`); // Uma sala privada para cada usuário
    console.log(`Usuário ${userId} entrou na sua sala pessoal.`);
  }

  // OUVINTE PARA ENTRAR EM SALAS DE GRUPO
  socket.on('join_group_room', (groupId) => {
    const roomName = `group-${groupId}`;
    socket.join(roomName);
    console.log(`Socket ${socket.id} (Usuário: ${userId}) entrou na sala do grupo: ${roomName}`);
  });

  // OUVINTE PARA ENTRAR EM SALAS DE DM (CONVERSA DIRETA)
  socket.on('join_dm_room', (roomName) => {
    socket.join(roomName);
    console.log(`Socket ${socket.id} (Usuário: ${userId}) entrou na sala de DM: ${roomName}`);
  });

  // O que acontece quando o cliente se desconecta
  socket.on('disconnect', () => {
    console.log(`Socket desconectado: ${socket.id}`);
  });
});

// Disponibiliza a instância 'io' para todas as rotas da aplicação
// Isso permite que as rotas (como friends.js) emitam eventos
app.set('io', io);


/**
 * Servidor a escutar na porta fornecida, em todas as interfaces de rede.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normaliza a porta para um número, string ou false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val; // named pipe
  if (port >= 0) return port; // port number
  return false;
}

/**
 * Event listener para o evento "error" do servidor HTTP.
 */
function onError(error) {
  if (error.syscall !== 'listen') throw error;
  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requer privilégios elevados');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' já está em uso');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener para o evento "listening" do servidor HTTP.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('A escutar em ' + bind);
  console.log(`Servidor a correr em http://localhost:${port}`);
}