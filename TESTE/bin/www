#!/usr/bin/env node

// MODIFICAÇÃO: Importa o 'app' e o 'sessionMiddleware'
const { app, sessionMiddleware } = require('../app'); 
const debug = require('debug')('teste:server');
const http = require('http');
const { Server } = require("socket.io");
// MODIFICAÇÃO: Importa o pacote de ponte
const sharedsession = require("express-socket.io-session");

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

const server = http.createServer(app);

// --- INÍCIO DA CONFIGURAÇÃO DO SOCKET.IO ---
const io = new Server(server, {
  cors: {
    origin: "http://localhost:3000",
    methods: ["GET", "POST"]
  }
});

// MODIFICAÇÃO: Conecta a sessão do Express com o Socket.IO
io.use(sharedsession(sessionMiddleware, {
    autoSave: true
}));

app.set('io', io);

const socketRooms = {};

io.on('connection', (socket) => {
  console.log('Um utilizador conectou-se:', socket.id);

  socket.on('join_group_room', (groupId) => {
    if (socketRooms[socket.id]) {
      socket.leave(socketRooms[socket.id]);
    }
    const roomName = `group-${groupId}`;
    socket.join(roomName);
    socketRooms[socket.id] = roomName;
    console.log(`Socket ${socket.id} entrou na sala de grupo: ${roomName}`);
  });
  
  socket.on('leave_group_room', (groupId) => {
    const roomName = `group-${groupId}`;
    socket.leave(roomName);
    if (socketRooms[socket.id] === roomName) {
      delete socketRooms[socket.id];
    }
    console.log(`Socket ${socket.id} saiu da sala de grupo: ${roomName}`);
  });

  socket.on('join_dm_room', (friendId) => {
    const currentUserId = socket.handshake.session.user.id_usuario;

    if (socketRooms[socket.id]) {
      socket.leave(socketRooms[socket.id]);
    }
    
    const ids = [currentUserId, parseInt(friendId, 10)].sort();
    const roomName = `dm-${ids[0]}-${ids[1]}`;

    socket.join(roomName);
    socketRooms[socket.id] = roomName;
    console.log(`Socket ${socket.id} entrou na sala de DM: ${roomName}`);
  });

  socket.on('disconnect', () => {
    console.log('Utilizador desconectou-se:', socket.id);
    delete socketRooms[socket.id];
  });
});
// --- FIM DA CONFIGURAÇÃO DO SOCKET.IO ---

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) { return val; }
  if (port >= 0) { return port; }
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') { throw error; }
  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('Servidor e Socket.IO a postos na porta ' + port);
}