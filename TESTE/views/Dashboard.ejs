<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard - EsquizoCord</title>
    <link rel="icon" type="image/png" href="/images/logo.png">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        *, *::before, *::after { box-sizing: border-box; }
        :root {
            --background-primary: #36393f; --background-secondary: #2f3136; --background-tertiary: #202225;
            --header-primary: #fff; --text-normal: #dcddde; --text-muted: #72767d;
            --brand-experiment: #660080; --brand-hover: #572364; --purple-accent: #cc00ff;
            --green-accent: #43B581; --red-danger: #f04747; --red-danger-hover: #d84040;
        }
        body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; margin: 0; overflow: hidden; color: var(--text-normal); background-color: var(--background-tertiary); }
        .dashboard-layout { display: flex; height: 100vh; }
        .server-list { width: 72px; background-color: var(--background-tertiary); padding: 12px 0; display: flex; flex-direction: column; align-items: center; flex-shrink: 0; overflow-y: auto; }
        .server-icon { width: 48px; height: 48px; border-radius: 50%; background-color: var(--background-primary); margin-bottom: 8px; display: flex; justify-content: center; align-items: center; cursor: pointer; transition: border-radius 0.3s, background-color 0.3s; }
        .server-icon:hover, .server-icon.active { border-radius: 16px; background-color: var(--brand-experiment); }
        .server-icon img { width: 100%; height: 100%; border-radius: inherit; object-fit: cover; }
        .divider { height: 2px; width: 32px; background-color: var(--background-secondary); margin: 8px 0; }
        .profile-icon-container { margin-top: auto; }
        .profile-icon { border: 2px solid var(--text-muted); }
        .profile-icon:hover { border-color: var(--purple-accent); }
        .channel-list { width: 260px; background-color: var(--background-secondary); display: flex; flex-direction: column; flex-shrink: 0; }
        .channel-header { padding: 12px; box-shadow: 0 1px 0 rgba(0,0,0,0.2); font-weight: bold; color: var(--header-primary); display: flex; justify-content: space-between; align-items: center; }
        #group-settings-icon { color: var(--text-muted); cursor: pointer; display: none; }
        #group-settings-icon:hover { color: var(--header-primary); }
        .channel-list-content { padding: 12px; flex-grow: 1; overflow-y: auto; display: flex; flex-direction: column;}
        .channel-list-header { color: var(--text-muted); font-size: 12px; font-weight: bold; margin-bottom: 10px; text-transform: uppercase; }
        .friend-item { display: flex; align-items: center; padding: 8px; border-radius: 4px; cursor: pointer; gap: 8px; }
        .friend-item:hover { background-color: rgba(255,255,255,0.04); }
        .friend-item img { width: 32px; height: 32px; border-radius: 50%; }
        .admin-icon { color: #f1c40f; font-size: 10px; margin-left: auto; }
        .friend-request-item { background-color: var(--background-tertiary); padding: 8px; border-radius: 4px; margin-bottom: 8px; display: flex; justify-content: space-between; align-items: center; }
        .request-actions { display: flex; gap: 10px; }
        .request-actions button { background: none; border: none; cursor: pointer; font-size: 20px; }
        .accept-btn { color: var(--green-accent); }
        .reject-btn, .cancel-request-btn { color: var(--red-danger); }
        .user-panel { background-color: #292b2f; padding: 12px; display: flex; align-items: center; }
        .user-panel img { width: 32px; height: 32px; border-radius: 50%; margin-right: 8px; }
        .user-panel .username { font-weight: bold; }
        .chat-area { flex-grow: 1; background-color: var(--background-primary); display: flex; flex-direction: column; }
        .chat-header { padding: 12px 16px; box-shadow: 0 1px 0 rgba(0,0,0,0.2); font-weight: bold; color: var(--header-primary); display: flex; align-items: center; gap: 8px; }
        .chat-header h3 { margin: 0; font-size: 16px; display: inline; }
        .chat-header .group-id { color: var(--text-muted); font-size: 12px; }
        .chat-messages { flex-grow: 1; padding: 16px; overflow-y: auto; }
        .chat-input-bar { padding: 0 16px 24px 16px; }
        .chat-input-bar input { width: 100%; padding: 12px; border-radius: 8px; border: none; background-color: #40444b; color: var(--text-normal); }
        .modal-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.7); display: none; justify-content: center; align-items: center; z-index: 1000; }
        .modal-content { background-color: var(--background-secondary); padding: 24px; border-radius: 8px; width: 90%; max-width: 440px; display: flex; flex-direction: column; }
        .modal-content.large { max-width: 520px; height: 70vh; }
        .modal-content h3 { text-align: center; margin-top: 0; }
        .modal-content label { font-weight: bold; color: var(--text-muted); font-size: 12px; display: block; margin-bottom: 8px; }
        .modal-content input[type="text"], .modal-content input[type="file"], .modal-content input[type="search"] { width: 100%; padding: 10px; border-radius: 4px; border: 1px solid var(--background-tertiary); background-color: var(--background-tertiary); color: var(--text-normal); margin-bottom: 20px; }
        .checkbox-container { display: flex; align-items: center; gap: 8px; margin-bottom: 20px; }
        .checkbox-container label { margin: 0; font-size: 14px; color: var(--text-normal); }
        .modal-actions { display: flex; justify-content: space-between; align-items: center; margin-top: auto; }
        .modal-actions button { padding: 10px 24px; border: none; border-radius: 4px; cursor: pointer; font-weight: bold; }
        .cancel-btn { background: none; color: var(--header-primary); }
        .submit-btn, .join-btn, .add-friend-btn { background-color: var(--brand-experiment); color: white; }
        .delete-btn { background-color: var(--red-danger); color: white; }
        #search-results, .friend-requests-container { flex-grow: 1; overflow-y: auto; margin-top: 10px; }
        .search-result-item { display: flex; align-items: center; justify-content: space-between; padding: 10px; border-radius: 4px; margin-bottom: 8px; background-color: var(--background-primary); }
        .search-result-info { display: flex; align-items: center; gap: 10px; }
        .search-result-info img { width: 40px; height: 40px; border-radius: 50%; }
        .search-result-name .group-id-search { color: var(--text-muted); font-size: 12px; }
        .friends-nav { display: flex; padding: 12px; gap: 8px; border-bottom: 1px solid var(--background-tertiary); }
        .friends-nav-btn { flex: 1; background: #4f545c; border: none; color: var(--text-normal); padding: 8px 5px; cursor: pointer; border-radius: 4px; font-size: 14px; text-align: center; }
        .friends-nav-btn.active { background-color: var(--brand-experiment); }
        .add-friend-container p { font-size: 12px; color: var(--text-muted); margin-top: 0; margin-bottom: 10px; }
        .add-friend-input { display: flex; width: 100%; }
        .add-friend-input input { flex-grow: 1; width: 1%; min-width: 0; border: 1px solid var(--background-tertiary); background-color: var(--background-tertiary); color: var(--text-normal); padding: 8px; border-radius: 3px 0 0 3px; border-right: none; }
        .add-friend-input button { flex-shrink: 0; white-space: nowrap; border-radius: 0 3px 3px 0; background-color: var(--brand-experiment); color: white; border: none; padding: 8px 12px; cursor: pointer; font-weight: bold; }
        .tab-content { display: none; }
        .tab-content.active { display: flex; flex-direction: column; height: 100%; flex-grow: 1; }
    </style>
</head>
<body 
    data-user='<%- JSON.stringify(user || null) %>'
    data-groups='<%- JSON.stringify(groups || []) %>'
    data-friends='<%- JSON.stringify(friends || []) %>'
    data-pending-requests='<%- JSON.stringify(pendingRequests || []) %>'
    data-sent-requests='<%- JSON.stringify(sentRequests || []) %>'
>
    <div class="dashboard-layout">
        <nav class="server-list">
            <div class="server-icon active" id="home-button" title="Início">
                 <img src="/images/logo.png" alt="Início">
            </div>
            <div class="divider"></div>
            <% if (groups && groups.length > 0) { %>
                <% groups.forEach(group => { %>
                    <div class="server-icon" title="<%= group.Nome %>" data-group-id="<%= group.id_grupo %>">
                        <img src="<%= group.Foto || '/images/default-group-icon.png' %>" alt="<%= group.Nome %>">
                    </div>
                <% }); %>
            <% } %>
            <div class="server-icon" id="add-server-button" title="Adicionar um servidor">
                <i class="fas fa-plus" style="color: var(--green-accent);"></i>
            </div>
            <div class="server-icon" id="explore-button" title="Explorar Servidores">
                <i class="fas fa-compass" style="color: var(--green-accent);"></i>
            </div>
            <div class="profile-icon-container">
                 <a href="/configuracao">
                    <% if (user && user.FotoPerfil) { %>
                        <img src="<%= user.FotoPerfil %>" alt="Perfil" class="server-icon profile-icon">
                    <% } else { %>
                        <img src="/images/logo.png" alt="Perfil" class="server-icon profile-icon">
                    <% } %>
                 </a>
            </div>
        </nav>
        <aside class="channel-list">
            <div class="channel-header">
                <span id="group-name-header">Amigos</span>
                <i class="fas fa-cog" id="group-settings-icon" title="Configurações do Grupo"></i>
            </div>
            <div id="friends-nav-container" class="friends-nav">
                <button class="friends-nav-btn active" data-tab="friends-list">Amigos</button>
                <button class="friends-nav-btn" data-tab="pending-requests">Pendentes</button>
                <button class="friends-nav-btn" data-tab="add-friend">Adicionar</button>
            </div>
            <div class="channel-list-content" id="channel-list-content">
                <!-- Conteúdo dinâmico aqui -->
            </div>
            <div class="user-panel">
                 <% if (user) { %>
                     <img src="<%= user.FotoPerfil || '/images/logo.png' %>" alt="Perfil">
                     <span class="username"><%= user.Nome %></span>
                 <% } %>
            </div>
        </aside>
        <main class="chat-area">
            <div class="chat-header" id="chat-header"><h3>Mensagens Diretas</h3></div>
            <div class="chat-messages" id="chat-messages-container"><p>Selecione um amigo para começar a conversar.</p></div>
            <div class="chat-input-bar"><input type="text" placeholder="Conversar..."></div>
        </main>
    </div>

    <!-- Modais -->
    <div class="modal-overlay" id="create-group-modal">
        <div class="modal-content">
            <h3>Crie o seu servidor</h3>
            <form id="create-group-form">
                <label for="group-name-create">NOME DO SERVIDOR</label>
                <input type="text" id="group-name-create" name="nome" required>
                <label for="group-photo-create">FOTO DO SERVIDOR (Opcional)</label>
                <input type="file" id="group-photo-create" name="foto" accept="image/*">
                <div class="checkbox-container">
                    <input type="checkbox" id="group-private-create" name="isPrivate">
                    <label for="group-private-create">Grupo Privado</label>
                </div>
                <div class="modal-actions">
                    <button type="button" class="cancel-btn">Cancelar</button>
                    <button type="submit" class="submit-btn">Criar</button>
                </div>
            </form>
        </div>
    </div>
    <div class="modal-overlay" id="edit-group-modal">
        <div class="modal-content">
            <h3>Configurações do Grupo</h3>
            <form id="edit-group-form">
                <input type="hidden" id="edit-group-id" name="groupId">
                <label for="edit-group-name">NOME DO SERVIDOR</label>
                <input type="text" id="edit-group-name" name="nome" required>
                <label for="edit-group-photo">FOTO DO SERVIDOR</label>
                <input type="file" id="edit-group-photo" name="foto" accept="image/*">
                <div class="checkbox-container">
                    <input type="checkbox" id="edit-group-private" name="isPrivate">
                    <label for="edit-group-private">Grupo Privado</label>
                </div>
                <div class="modal-actions">
                    <button type="button" class="delete-btn" id="delete-group-btn">Excluir Grupo</button>
                    <div>
                        <button type="button" class="cancel-btn">Cancelar</button>
                        <button type="submit" class="submit-btn">Salvar</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
    <div class="modal-overlay" id="explore-group-modal">
        <div class="modal-content large">
            <h3>Explorar Servidores Públicos</h3>
            <form id="search-group-form">
                 <input type="search" id="search-group-input" placeholder="Pesquisar grupos públicos...">
            </form>
            <div id="search-group-results"></div>
             <div class="modal-actions">
                <button type="button" class="cancel-btn">Fechar</button>
            </div>
        </div>
    </div>
    
    <script src="/socket.io/socket.io.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const socket = io();
            const body = document.querySelector('body');
            
            const parseJsonData = (attribute) => {
                const data = body.dataset[attribute];
                if (!data) return null;
                try { return JSON.parse(data); } catch (e) { return null; }
            };

            const currentUser = parseJsonData('user');
            const groups = parseJsonData('groups') || [];
            const friends = parseJsonData('friends') || [];
            const pendingRequests = parseJsonData('pendingRequests') || [];
            const sentRequests = parseJsonData('sentRequests') || [];
            
            const currentUserId = currentUser ? currentUser.id_usuario : null;
            let currentGroupData = null;
            let currentChatId = null;

            const createGroupModal = document.getElementById('create-group-modal');
            const editGroupModal = document.getElementById('edit-group-modal');
            const exploreModal = document.getElementById('explore-group-modal');
            
            const createGroupForm = document.getElementById('create-group-form');
            const editGroupForm = document.getElementById('edit-group-form');
            const searchGroupInput = document.getElementById('search-group-input');
            const searchGroupResults = document.getElementById('search-group-results');

            const addServerButton = document.getElementById('add-server-button');
            const exploreButton = document.getElementById('explore-button');
            const homeButton = document.getElementById('home-button');
            const friendsNavContainer = document.getElementById('friends-nav-container');
            const groupNameHeader = document.getElementById('group-name-header');
            const channelListContent = document.getElementById('channel-list-content');
            const groupSettingsIcon = document.getElementById('group-settings-icon');
            const deleteGroupButton = document.getElementById('delete-group-btn');
            const serverIcons = document.querySelectorAll('.server-icon[data-group-id]');
            const chatHeader = document.getElementById('chat-header');
            const chatMessagesContainer = document.getElementById('chat-messages-container');
            const chatInput = document.querySelector('.chat-input-bar input');

            socket.on('connect', () => console.log('Conectado ao servidor de sockets com ID:', socket.id));
            socket.on('new_group_message', (message) => {
                if (message.id_chat == currentChatId) renderMessage(message);
            });

            function renderMessage(message) {
                if (!chatMessagesContainer) return;
                const messageItem = document.createElement('div');
                messageItem.classList.add('friend-item');
                messageItem.style.marginBottom = '10px';
                messageItem.innerHTML = `<img src="${message.autorFoto || '/images/logo.png'}" alt="${message.autorNome}" style="width: 40px; height: 40px;"><div><strong style="color: var(--header-primary);">${message.autorNome}</strong><p style="margin: 0; color: var(--text-normal);">${message.Conteudo}</p></div>`;
                chatMessagesContainer.appendChild(messageItem);
                chatMessagesContainer.scrollTop = chatMessagesContainer.scrollHeight;
            }

            async function loadAndRenderMessages(chatId) {
                if (!chatId) {
                    if (chatMessagesContainer) chatMessagesContainer.innerHTML = '<p>Selecione um canal para ver as mensagens.</p>';
                    return;
                }
                try {
                    const response = await fetch(`/groups/chats/${chatId}/messages`);
                    const messages = await response.json();
                    if (!chatMessagesContainer) return;
                    chatMessagesContainer.innerHTML = '';
                    if (messages.length === 0) chatMessagesContainer.innerHTML = '<p>Nenhuma mensagem ainda. Seja o primeiro a dizer olá!</p>';
                    else messages.forEach(message => renderMessage(message));
                } catch (error) {
                    if (chatMessagesContainer) chatMessagesContainer.innerHTML = '<p>Não foi possível carregar as mensagens.</p>';
                }
            }
            
            function renderFriendsView() {
                if(groupSettingsIcon) groupSettingsIcon.style.display = 'none';
                if(friendsNavContainer) friendsNavContainer.style.display = 'flex';
                if(groupNameHeader) groupNameHeader.textContent = "Amigos";
                if(chatHeader) chatHeader.innerHTML = `<h3>Mensagens Diretas</h3>`;
                if(chatInput) chatInput.placeholder = 'Conversar...';
                if(chatMessagesContainer) chatMessagesContainer.innerHTML = '<p>Selecione um amigo para começar a conversar.</p>';
                document.querySelectorAll('.friends-nav-btn').forEach(btn => btn.classList.remove('active'));
                document.querySelector('.friends-nav-btn[data-tab="friends-list"]')?.classList.add('active');
                renderFriendsList();
            }
            
            function renderFriendsList() {
                if (!channelListContent) return;
                channelListContent.innerHTML = '<div class="channel-list-header">Amigos</div>';
                if (friends.length > 0) {
                    friends.forEach(friend => {
                        const friendDiv = document.createElement('div');
                        friendDiv.className = 'friend-item';
                        friendDiv.innerHTML = `<img src="${friend.FotoPerfil || '/images/logo.png'}"> <span>${friend.Nome}</span>`;
                        channelListContent.appendChild(friendDiv);
                    });
                } else {
                    channelListContent.innerHTML += '<p style="padding: 8px; color: var(--text-muted);">A sua lista de amigos está vazia.</p>';
                }
            }

            function renderPendingRequests() {
                if (!channelListContent) return;
                channelListContent.innerHTML = '';
                channelListContent.innerHTML += '<div class="channel-list-header">Pedidos Recebidos</div>';
                if (pendingRequests && pendingRequests.length > 0) {
                    pendingRequests.forEach(req => {
                        const reqDiv = document.createElement('div');
                        reqDiv.className = 'friend-request-item';
                        reqDiv.dataset.requestId = req.id_amizade;
                        reqDiv.innerHTML = `<div class="friend-item" style="flex-grow: 1;"> <img src="${req.FotoPerfil || '/images/logo.png'}"> <span>${req.Nome}</span> </div> <div class="request-actions"> <button class="accept-btn" title="Aceitar"><i class="fas fa-check-circle"></i></button> <button class="reject-btn" title="Recusar"><i class="fas fa-times-circle"></i></button> </div>`;
                        channelListContent.appendChild(reqDiv);
                    });
                } else {
                    channelListContent.innerHTML += '<p style="padding: 8px; color: var(--text-muted);">Nenhum pedido recebido.</p>';
                }
                channelListContent.innerHTML += '<div class="channel-list-header" style="margin-top: 20px;">Pedidos Enviados</div>';
                if (sentRequests && sentRequests.length > 0) {
                    sentRequests.forEach(req => {
                        const reqDiv = document.createElement('div');
                        reqDiv.className = 'friend-request-item';
                        reqDiv.dataset.requestId = req.id_amizade;
                        reqDiv.innerHTML = `<div class="friend-item" style="flex-grow: 1;"> <img src="${req.FotoPerfil || '/images/logo.png'}"> <span>${req.Nome}</span> </div> <div class="request-actions"> <button class="cancel-request-btn" title="Cancelar Pedido"><i class="fas fa-trash"></i></button> </div>`;
                        channelListContent.appendChild(reqDiv);
                    });
                } else {
                     channelListContent.innerHTML += '<p style="padding: 8px; color: var(--text-muted);">Nenhum pedido enviado.</p>';
                }
            }

            function renderAddFriend() {
                if (!channelListContent) return;
                channelListContent.innerHTML = `<div class="add-friend-container"> <div class="channel-list-header">Adicionar Amigo</div> <p>Pode adicionar um amigo com o seu nome de utilizador.</p> <div class="add-friend-input"> <input type="text" id="add-friend-input" placeholder="Digite o nome do utilizador..."> <button id="add-friend-submit" class="submit-btn">Enviar Pedido</button> </div> <div id="add-friend-results" style="margin-top: 10px;"></div> </div>`;
            }

            async function renderGroupView(groupId) {
                try {
                    const response = await fetch(`/groups/${groupId}/details`);
                    const data = await response.json();
                    currentGroupData = data;
                    if (friendsNavContainer) friendsNavContainer.style.display = 'none';
                    if (groupNameHeader) groupNameHeader.textContent = data.details.Nome;
                    if (groupSettingsIcon) groupSettingsIcon.style.display = (currentUserId === data.details.id_criador) ? 'block' : 'none';
                    if (!channelListContent) return;
                    channelListContent.innerHTML = '';
                    const firstChannel = data.channels[0];
                    if (firstChannel) {
                        currentChatId = firstChannel.id_chat;
                        socket.emit('join_group_room', groupId);
                        if(chatHeader) chatHeader.innerHTML = `<h3><i class="fas fa-hashtag" style="color: var(--text-muted);"></i> ${firstChannel.Nome}</h3>`;
                        if(chatInput) chatInput.placeholder = `Conversar em #${firstChannel.Nome}`;
                        loadAndRenderMessages(currentChatId);
                    } else {
                        currentChatId = null;
                         if(chatHeader) chatHeader.innerHTML = `<h3>Sem canais de texto</h3>`;
                         if(chatInput) chatInput.placeholder = `Crie um canal para começar a conversar.`;
                         if(chatMessagesContainer) chatMessagesContainer.innerHTML = '';
                    }
                    const memberHeader = document.createElement('div');
                    memberHeader.className = 'channel-list-header';
                    memberHeader.textContent = `MEMBROS - ${data.members.length}`;
                    channelListContent.appendChild(memberHeader);
                    data.members.forEach(member => {
                        const memberDiv = document.createElement('div');
                        memberDiv.className = 'friend-item';
                        let memberHTML = `<img src="${member.FotoPerfil || '/images/logo.png'}" alt="${member.Nome}"><span>${member.Nome}</span>`;
                        if (member.isAdmin) memberHTML += `<i class="fas fa-crown admin-icon" title="Administrador"></i>`;
                        memberDiv.innerHTML = memberHTML;
                        channelListContent.appendChild(memberDiv);
                    });
                } catch (err) {
                    if(channelListContent) channelListContent.innerHTML = '<p>Erro ao carregar detalhes.</p>';
                }
            }
            
            function closeModal(modal) { if(modal) modal.style.display = 'none'; }
            function openModal(modal) { if(modal) modal.style.display = 'flex'; }
            
            if (addServerButton) addServerButton.addEventListener('click', () => openModal(createGroupModal));
            if (exploreButton) exploreButton.addEventListener('click', () => {
                openModal(exploreModal);
                exploreModal.querySelector('#search-group-input')?.dispatchEvent(new Event('input'));
            });
            if (groupSettingsIcon) groupSettingsIcon.addEventListener('click', () => {
                if (currentGroupData) {
                    editGroupModal.querySelector('#edit-group-id').value = currentGroupData.details.id_grupo;
                    editGroupModal.querySelector('#edit-group-name').value = currentGroupData.details.Nome;
                    editGroupModal.querySelector('#edit-group-private').checked = currentGroupData.details.IsPrivate;
                    openModal(editGroupModal);
                }
            });
            [createGroupModal, editGroupModal, exploreModal].forEach(modal => {
                if (!modal) return;
                modal.querySelector('.cancel-btn')?.addEventListener('click', () => closeModal(modal));
                modal.addEventListener('click', (e) => {
                    if (e.target === modal) closeModal(modal);
                });
            });
            if (homeButton) homeButton.addEventListener('click', () => {
                document.querySelectorAll('.server-icon').forEach(i => i.classList.remove('active'));
                homeButton.classList.add('active');
                renderFriendsView();
            });
            if (friendsNavContainer) {
                friendsNavContainer.addEventListener('click', e => {
                    if (e.target.tagName === 'BUTTON') {
                        friendsNavContainer.querySelectorAll('.friends-nav-btn').forEach(btn => btn.classList.remove('active'));
                        e.target.classList.add('active');
                        const tab = e.target.dataset.tab;
                        if (tab === 'friends-list') renderFriendsList();
                        else if (tab === 'pending-requests') renderPendingRequests();
                        else if (tab === 'add-friend') renderAddFriend();
                    }
                });
            }
            if (createGroupForm) createGroupForm.addEventListener('submit', handleFormSubmit('/groups/criar', 'Erro ao criar grupo.'));
            if (editGroupForm) {
                editGroupForm.addEventListener('submit', e => {
                    const groupId = editGroupForm.querySelector('#edit-group-id').value;
                    handleFormSubmit(`/groups/${groupId}/settings`, 'Erro ao atualizar grupo.')(e);
                });
            }
            if (deleteGroupButton) {
                deleteGroupButton.addEventListener('click', async () => {
                    const groupId = document.getElementById('edit-group-id').value;
                    const groupName = document.getElementById('edit-group-name').value;
                    if (confirm(`Tem a certeza de que deseja excluir o grupo "${groupName}"? Esta ação é irreversível.`)) {
                        handleAction(deleteGroupButton, `/groups/${groupId}`, 'Excluindo...', 'Excluir Grupo', null, 'DELETE', true);
                    }
                });
            }
            
            let searchTimeout;
            if(searchGroupInput){
                 searchGroupInput.addEventListener('input', e => {
                    clearTimeout(searchTimeout);
                    const query = e.target.value;
                    searchTimeout = setTimeout(async () => {
                        const searchUrl = `/groups/search?q=${encodeURIComponent(query)}`;
                        try {
                            const response = await fetch(searchUrl);
                            const results = await response.json();
                            renderSearchResults(results, searchGroupResults, true);
                        } catch (err) {
                            searchGroupResults.innerHTML = '<p>Erro ao pesquisar.</p>';
                        }
                    }, 300);
                });
            }
            
            document.body.addEventListener('click', async (e) => {
                const target = e.target;
                if (target.classList.contains('join-btn')) {
                    const groupId = target.dataset.groupId;
                    handleAction(target, `/groups/${groupId}/join`, 'Entrando...', 'Entrar', null, 'POST', true);
                } 
                else if (target.id === 'add-friend-submit') {
                    const input = document.getElementById('add-friend-input');
                    const username = input.value.trim();
                    if (!username) return;
                    try {
                        const response = await fetch(`/friends/search?q=${encodeURIComponent(username)}`);
                        const users = await response.json();
                        if(users.length > 0) {
                             handleAction(target, '/friends/request', 'Enviando...', 'Enviar Pedido', { requestedId: users[0].id_usuario });
                        } else {
                            alert('Utilizador não encontrado.');
                        }
                    } catch(err) {
                        alert('Erro de rede.');
                    }
                } else if (target.closest('.accept-btn') || target.closest('.reject-btn')) {
                    const button = target.closest('button');
                    const requestItem = button.closest('.friend-request-item');
                    const requestId = requestItem.dataset.requestId;
                    const action = button.classList.contains('accept-btn') ? 'aceite' : 'recusada';
                    handleAction(button, '/friends/respond', '...', '', { requestId, action }, 'POST', true);
                } else if (target.closest('.cancel-request-btn')) {
                    const button = target.closest('button');
                    const requestItem = button.closest('.friend-request-item');
                    const requestId = requestItem.dataset.requestId;
                    handleAction(button, '/friends/cancel', 'Cancelando...', 'Cancelar', { requestId }, 'POST', true);
                }
            });

            serverIcons.forEach(icon => {
                icon.addEventListener('click', () => renderGroupView(icon.dataset.groupId));
            });

            async function handleFormSubmit(url, errorMessage) {
                return async function(event) {
                    event.preventDefault();
                    const formData = new FormData(event.target);
                    try {
                        const response = await fetch(url, { method: 'POST', body: formData });
                        if (response.ok) window.location.reload();
                        else alert(`${errorMessage}: ${(await response.json()).message}`);
                    } catch (err) {
                        alert('Ocorreu um erro de rede. Tente novamente.');
                    }
                }
            }

            function renderSearchResults(results, container, isGroupSearch) {
                container.innerHTML = '';
                if (results.length === 0) {
                    container.innerHTML = '<p>Nenhum resultado encontrado.</p>';
                    return;
                }
                results.forEach(item => {
                    const itemDiv = document.createElement('div');
                    itemDiv.className = 'search-result-item';
                    if (isGroupSearch) {
                        itemDiv.innerHTML = `<div class="search-result-info"> <img src="${item.Foto || '/images/default-group-icon.png'}" alt="${item.Nome}"> <div class="search-result-name"> <span>${item.Nome}</span> <span class="group-id-search">#${item.id_grupo}</span> </div> </div> <button class="join-btn" data-group-id="${item.id_grupo}">Entrar</button>`;
                    } else { 
                        itemDiv.innerHTML = `<div class="search-result-info"> <img src="${item.FotoPerfil || '/images/logo.png'}" alt="${item.Nome}"> <div class="search-result-name"><span>${item.Nome}</span></div> </div> <button class="add-friend-btn" data-user-id="${item.id_usuario}">Adicionar Amigo</button>`;
                    }
                    container.appendChild(itemDiv);
                });
            }

            async function handleAction(button, url, loadingText, defaultText, body = null, method = 'POST', reload = false) {
                button.disabled = true;
                if(button.tagName === 'BUTTON') button.textContent = loadingText;
                try {
                    const options = { method: method, headers: {} };
                    if (body) {
                        options.headers['Content-Type'] = 'application/json';
                        options.body = JSON.stringify(body);
                    }
                    const response = await fetch(url, options);
                    if (response.ok) {
                         if (reload) {
                            window.location.reload();
                         } else {
                            const data = await response.json();
                            alert(data.message);
                            button.textContent = 'Feito!';
                         }
                    } else {
                        const data = await response.json();
                        alert(data.message);
                        button.disabled = false;
                        if(button.tagName === 'BUTTON') button.textContent = defaultText;
                    }
                } catch (err) {
                     alert('Ocorreu um erro de rede.');
                     button.disabled = false;
                     if(button.tagName === 'BUTTON') button.textContent = defaultText;
                }
            }
            
            // --- INICIALIZAÇÃO DA VIEW ---
            renderFriendsView();
        });
    </script>
</body>
</html>
