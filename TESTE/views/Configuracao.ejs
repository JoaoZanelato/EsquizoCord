<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Configurações - EsquizoCord</title>
    <link rel="icon" type="image/png" href="/images/logo.png">
    <style>
        /* Base para resetar estilos e definir box-sizing */
        *, *::before, *::after { box-sizing: border-box; }

        /* DEFINIÇÕES DE CORES BASE (TEMA PADRÃO) */
        :root {
            --background-primary: #36393f;
            --background-secondary: #2f3136;
            --background-tertiary: #202225;
            --header-primary: #fff;
            --text-normal: #dcddde;
            --text-muted: #72767d;
            --brand-experiment: #660080; /* Roxo principal */
            --brand-hover: #572364;
            --purple-accent: #cc00ff;
            --red-danger: #f04747;
        }

        /* --- DEFINIÇÕES DOS TEMAS ESPECÍFICOS --- */
        
        /* Tema Padrão Roxo (ID 1) */
        .theme-1 {
            --brand-experiment: #660080;
            --brand-hover: #572364;
            --purple-accent: #cc00ff;
        }
        /* Tema Azul Noturno (ID 2) */
        .theme-2 {
            --brand-experiment: #3498DB;
            --brand-hover: #2980B9;
            --purple-accent: #5DADE2;
        }
        /* Tema Verde Floresta (ID 3) */
        .theme-3 {
            --brand-experiment: #28A745;
            --brand-hover: #218838;
            --purple-accent: #86A189;
        }
        /* Tema Dark (ID 4) */
        .theme-4 {
            --brand-experiment: #3498DB;
            --brand-hover: #2980B9;
        }
        /* Tema Light (ID 5) */
        .theme-5 {
            --background-primary: #F0F2F5;
            --background-secondary: #FFFFFF;
            --header-primary: #1C1E21;
            --text-normal: #050505;
            --text-muted: #65676B;
            --brand-experiment: #0D6EFD;
            --brand-hover: #0a58ca;
        }

        /* --- ESTILOS GERAIS DA PÁGINA --- */
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            padding: 40px 0;
            margin: 0;
            background-image: url('/images/background.png');
            background-size: cover;
            background-position: center;
            background-attachment: fixed;
            color: var(--text-normal); 
            background-color: var(--background-tertiary);
        }
        .config-container {
            text-align: left;
            background-color: var(--background-secondary);
            color: var(--text-normal);
            padding: 40px 50px;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
            max-width: 500px;
            width: 90%;
        }
        h2 {
            text-align: center;
            margin-bottom: 25px;
            font-size: 28px;
            font-weight: 600;
            color: var(--header-primary);
        }
        form {
            display: flex;
            flex-direction: column;
        }
        label {
            margin-bottom: 5px;
            font-weight: bold;
            color: var(--text-muted);
        }
        input, textarea, select {
            padding: 12px;
            margin-bottom: 20px;
            border: 1px solid var(--background-tertiary);
            border-radius: 8px;
            background-color: var(--background-primary);
            color: var(--text-normal);
            font-size: 16px;
            font-family: inherit;
        }
        input:focus, textarea:focus, select:focus {
            outline: none;
            border-color: var(--brand-experiment);
            box-shadow: 0 0 5px var(--brand-experiment);
        }
        textarea {
            resize: vertical;
            min-height: 80px;
        }
        button[type="submit"] {
            padding: 12px;
            background-color: var(--brand-experiment);
            color: var(--header-primary);
            border: none; border-radius: 8px; cursor: pointer; font-size: 16px; font-weight: 600;
            transition: background-color 0.3s ease;
        }
        button[type="submit"]:hover {
            background-color: var(--brand-hover);
        }
        .profile-pic-section {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-bottom: 20px;
        }
        #profilePicPreview {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
            border: 3px solid var(--text-muted);
            margin-bottom: 10px;
            background-color: var(--background-secondary);
        }
        .file-upload-label {
            display: inline-block;
            padding: 8px 15px;
            background-color: var(--brand-experiment);
            color: var(--header-primary);
            border-radius: 5px;
            cursor: pointer;
            font-weight: normal;
            font-size: 14px;
            margin-bottom: 20px;
        }
        .file-upload-label:hover {
            background-color: var(--brand-hover);
        }
        #fotoPerfil {
            display: none;
        }
        .actions-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 20px;
        }
        .actions-container a {
            color: var(--text-muted);
            text-decoration: none;
            font-size: 14px;
        }
        .actions-container a:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body class="theme-<%= user && user.id_tema ? user.id_tema : '1' %>">
    <div class="config-container">
        <% if (user) { %>
            <h2>Configurações de <%= user.Nome %></h2>
            <form method="POST" action="/configuracao" enctype="multipart/form-data">
                <div class="profile-pic-section">
                    <img src="<%= user.FotoPerfil || '/images/logo.png' %>" alt="Foto de Perfil" id="profilePicPreview">
                    <label for="fotoPerfil" class="file-upload-label">Alterar Foto</label>
                    <input type="file" id="fotoPerfil" name="fotoPerfil" accept="image/png, image/jpeg">
                </div>
                <label for="nome">Nome:</label>
                <input type="text" id="nome" name="nome" value="<%= user.Nome %>" required autocomplete="name">
                <label for="biografia">Biografia:</label>
                <textarea id="biografia" name="biografia" placeholder="Fale um pouco sobre você..."><%= user.Biografia || '' %></textarea>
                <label for="tema">Tema:</label>
                <select id="tema" name="id_tema">
                    <% if (themes) { %>
                        <% themes.forEach(theme => { %>
                            <option value="<%= theme.id_tema %>" <%= (user.id_tema == theme.id_tema) ? 'selected' : '' %>>
                                <%= theme.nome_tema %>
                            </option>
                        <% }); %>
                    <% } %>
                </select>
                <button type="submit">Salvar Alterações</button>
            </form>
            <div class="actions-container">
                <a href="/dashboard">Ir para o Dashboard</a>
                <span>&nbsp;•&nbsp;</span>
                <a href="/sair">Sair</a>
                <span>&nbsp;•&nbsp;</span>
                <button type="button" id="show-delete-confirmation-btn" class="delete-account-link">Excluir Conta</button>
            </div>
        <% } else { %>
            <h2>Utilizador não encontrado.</h2>
            <a href="/login" class="back-link">Voltar ao Login</a>
        <% } %>
    </div>

    <script>
        const fotoPerfilInput = document.getElementById('fotoPerfil');
        const previewImage = event => {
            if (event.target.files && event.target.files[0]) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    document.querySelector("#profilePicPreview").src = e.target.result;
                }
                reader.readAsDataURL(event.target.files[0]);
            }
        };
        if(fotoPerfilInput) {
            fotoPerfilInput.addEventListener('change', previewImage);
        }
    </script>

<div id="delete-confirmation-section" style="display: none; margin-top: 20px; border-top: 1px solid var(--background-secondary); padding-top: 20px;">
    <p>Para confirmar a exclusão permanente da sua conta, digite sua senha.</p>
    <input type="password" id="delete-password-input" placeholder="Digite sua senha" style="width:100%; margin-bottom: 10px;">
    <div style="display: flex; gap: 10px;">
        <button type="button" id="confirm-delete-btn" class="delete-btn">Confirmar</button>
        <button type="button" id="cancel-delete-btn" class="cancel-btn">Cancelar</button>
    </div>
    <p id="delete-error-message" style="color: var(--red-danger); font-size: 14px; margin-top: 10px; display: none;"></p>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const deleteAccountModal = document.getElementById('delete-account-modal');
        const showDeleteBtn = document.getElementById('show-delete-account-modal-btn');
        const cancelDeleteBtn = document.getElementById('cancel-delete-account-btn');
        const confirmDeleteBtn = document.getElementById('confirm-delete-account-btn');

        const openModal = (modal) => { if (modal) modal.style.display = 'flex'; };
        const closeModal = (modal) => { if (modal) modal.style.display = 'none'; };

        if (showDeleteBtn) {
            showDeleteBtn.addEventListener('click', () => openModal(deleteAccountModal));
        }
        if (cancelDeleteBtn) {
            cancelDeleteBtn.addEventListener('click', () => closeModal(deleteAccountModal));
        }
        if (deleteAccountModal) {
            deleteAccountModal.addEventListener('click', (e) => {
                if (e.target === deleteAccountModal) closeModal(deleteAccountModal);
            });
        }
        if (confirmDeleteBtn) {
            confirmDeleteBtn.addEventListener('click', async () => {
                confirmDeleteBtn.disabled = true;
                confirmDeleteBtn.textContent = 'Excluindo...';

                try {
                    const response = await fetch('/users/me', { method: 'DELETE' });
                    const result = await response.json();
                    if (response.ok) {
                        alert(result.message);
                        window.location.href = '/login';
                    } else {
                        throw new Error(result.message || 'Ocorreu um erro.');
                    }
                } catch (error) {
                    alert('Erro ao excluir a conta: ' + error.message);
                    confirmDeleteBtn.disabled = false;
                    confirmDeleteBtn.textContent = 'Excluir Conta';
                }
            });
        }
    });
</script>
</body>
</html>
